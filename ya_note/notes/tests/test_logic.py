from django.test import TestCase
from django.contrib.auth import get_user_model

from notes.models import Note
from django.core.exceptions import ValidationError

User = get_user_model()


class TestLogic(TestCase):

    def setUp(self):
        self.user = User.objects.create_user(
            username='user', password='password'
        )
        self.client.login(username='user', password='password')

    def test_create_note(self):
        note = Note.objects.create(
            title='New Note', text='Some text', author=self.user
        )
        self.assertEqual(Note.objects.count(), 1)
        self.assertEqual(note.title, 'New Note')
        self.assertEqual(note.text, 'Some text')
        self.assertEqual(note.author, self.user)

    def test_slug_autogenerated(self):
        note = Note.objects.create(
            title='New Note', text='Some text', author=self.user
        )
        self.assertTrue(note.slug)

    def test_unique_slug(self):
        Note.objects.create(
            title='New Note',
            text='Some text',
            slug='test-slug',
            author=self.user
        )
        with self.assertRaises(ValidationError):
            another_note = Note(
                title='Another Note',
                text='Some text',
                slug='test-slug',
                author=self.user
            )
            another_note.full_clean()

    def test_edit_and_delete_note_by_author(self):
        note = Note.objects.create(
            title='Test Note', text='Test text', author=self.user
        )
        response = self.client.post(
            f'/edit/{note.slug}/',
            {'title': 'Updated Title', 'text': 'Updated text'}
        )
        note.refresh_from_db()
        self.assertEqual(note.title, 'Updated Title')
        self.assertIn(response.status_code, [200, 302])

        response = self.client.post(f'/delete/{note.slug}/')
        self.assertFalse(Note.objects.filter(pk=note.pk).exists())
        self.assertEqual(response.status_code, 302)
